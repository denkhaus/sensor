// Code generated by 'yaegi extract github.com/denkhaus/sensor/store'. DO NOT EDIT.

package symbols

import (
	"github.com/denkhaus/sensor/store"
	"reflect"
)

func init() {
	Symbols["github.com/denkhaus/sensor/store/store"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Conductivity":          reflect.ValueOf(store.Conductivity),
		"Embedded":              reflect.ValueOf(store.Embedded),
		"ErrDatabaseNotCreated": reflect.ValueOf(&store.ErrDatabaseNotCreated).Elem(),
		"Get":                   reflect.ValueOf(store.Get),
		"Humidity":              reflect.ValueOf(store.Humidity),
		"Initialize":            reflect.ValueOf(store.Initialize),
		"NewEmbeddedStore":      reflect.ValueOf(store.NewEmbeddedStore),
		"NewSensorStore":    	 reflect.ValueOf(store.NewSensorStore),
		"Salinity":              reflect.ValueOf(store.Salinity),
		"Sensor":                reflect.ValueOf(store.Sensor),
		"Set":                   reflect.ValueOf(store.Set),
		"TDS":                   reflect.ValueOf(store.TDS),
		"Temperature":           reflect.ValueOf(store.Temperature),

		// type definitions
		"DataID":        reflect.ValueOf((*store.DataID)(nil)),
		"EmbeddedStore": reflect.ValueOf((*store.EmbeddedStore)(nil)),
		"SensorStore":   reflect.ValueOf((*store.SensorStore)(nil)),

		// interface wrapper definitions
		"_EmbeddedStore": reflect.ValueOf((*_github_com_denkhaus_sensor_store_EmbeddedStore)(nil)),
		"_SensorStore":   reflect.ValueOf((*_github_com_denkhaus_sensor_store_SensorStore)(nil)),
	}
}

// _github_com_denkhaus_sensor_store_EmbeddedStore is an interface wrapper for EmbeddedStore type
type _github_com_denkhaus_sensor_store_EmbeddedStore struct {
	IValue   interface{}
	WClose   func() (err error)
	WDelete  func(key string, v any) error
	WGet     func(key string, v interface{}) error
	WInsert  func(key string, v any) error
	WMustGet func(key string, v interface{}) bool
	WOpen    func() (err error)
	WUpdate  func(key string, v any) error
	WUpsert  func(key string, v any) error
}

func (W _github_com_denkhaus_sensor_store_EmbeddedStore) Close() (err error) {
	return W.WClose()
}
func (W _github_com_denkhaus_sensor_store_EmbeddedStore) Delete(key string, v any) error {
	return W.WDelete(key, v)
}
func (W _github_com_denkhaus_sensor_store_EmbeddedStore) Get(key string, v interface{}) error {
	return W.WGet(key, v)
}
func (W _github_com_denkhaus_sensor_store_EmbeddedStore) Insert(key string, v any) error {
	return W.WInsert(key, v)
}
func (W _github_com_denkhaus_sensor_store_EmbeddedStore) MustGet(key string, v interface{}) bool {
	return W.WMustGet(key, v)
}
func (W _github_com_denkhaus_sensor_store_EmbeddedStore) Open() (err error) {
	return W.WOpen()
}
func (W _github_com_denkhaus_sensor_store_EmbeddedStore) Update(key string, v any) error {
	return W.WUpdate(key, v)
}
func (W _github_com_denkhaus_sensor_store_EmbeddedStore) Upsert(key string, v any) error {
	return W.WUpsert(key, v)
}

// _github_com_denkhaus_sensor_store_SensorStore is an interface wrapper for SensorStore type
type _github_com_denkhaus_sensor_store_SensorStore struct {
	IValue interface{}
	WGet   func(id store.DataID) float64
	WSet   func(id store.DataID, data float64)
}

func (W _github_com_denkhaus_sensor_store_SensorStore) Get(id store.DataID) float64 {
	return W.WGet(id)
}
func (W _github_com_denkhaus_sensor_store_SensorStore) Set(id store.DataID, data float64) {
	W.WSet(id, data)
}

// Code generated by 'yaegi extract github.com/timshannon/badgerhold/v4'. DO NOT EDIT.

package symbols

import (
	"github.com/timshannon/badgerhold/v4"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["github.com/timshannon/badgerhold/v4/badgerhold"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BadgerHoldIndexTag": reflect.ValueOf(constant.MakeFromLiteral("\"badgerholdIndex\"", token.STRING, 0)),
		"BadgerholdKeyTag":   reflect.ValueOf(constant.MakeFromLiteral("\"badgerholdKey\"", token.STRING, 0)),
		"DefaultDecode":      reflect.ValueOf(badgerhold.DefaultDecode),
		"DefaultEncode":      reflect.ValueOf(badgerhold.DefaultEncode),
		"DefaultOptions":     reflect.ValueOf(&badgerhold.DefaultOptions).Elem(),
		"ErrKeyExists":       reflect.ValueOf(&badgerhold.ErrKeyExists).Elem(),
		"ErrNotFound":        reflect.ValueOf(&badgerhold.ErrNotFound).Elem(),
		"ErrUniqueExists":    reflect.ValueOf(&badgerhold.ErrUniqueExists).Elem(),
		"Key":                reflect.ValueOf(constant.MakeFromLiteral("\"\"", token.STRING, 0)),
		"NextSequence":       reflect.ValueOf(badgerhold.NextSequence),
		"Open":               reflect.ValueOf(badgerhold.Open),
		"Slice":              reflect.ValueOf(badgerhold.Slice),
		"Where":              reflect.ValueOf(badgerhold.Where),

		// type definitions
		"AggregateResult": reflect.ValueOf((*badgerhold.AggregateResult)(nil)),
		"Comparer":        reflect.ValueOf((*badgerhold.Comparer)(nil)),
		"Criterion":       reflect.ValueOf((*badgerhold.Criterion)(nil)),
		"DecodeFunc":      reflect.ValueOf((*badgerhold.DecodeFunc)(nil)),
		"EncodeFunc":      reflect.ValueOf((*badgerhold.EncodeFunc)(nil)),
		"ErrTypeMismatch": reflect.ValueOf((*badgerhold.ErrTypeMismatch)(nil)),
		"Field":           reflect.ValueOf((*badgerhold.Field)(nil)),
		"Index":           reflect.ValueOf((*badgerhold.Index)(nil)),
		"KeyList":         reflect.ValueOf((*badgerhold.KeyList)(nil)),
		"MatchFunc":       reflect.ValueOf((*badgerhold.MatchFunc)(nil)),
		"Options":         reflect.ValueOf((*badgerhold.Options)(nil)),
		"Query":           reflect.ValueOf((*badgerhold.Query)(nil)),
		"RecordAccess":    reflect.ValueOf((*badgerhold.RecordAccess)(nil)),
		"Store":           reflect.ValueOf((*badgerhold.Store)(nil)),
		"Storer":          reflect.ValueOf((*badgerhold.Storer)(nil)),

		// interface wrapper definitions
		"_Comparer": reflect.ValueOf((*_github_com_timshannon_badgerhold_v4_Comparer)(nil)),
		"_Storer":   reflect.ValueOf((*_github_com_timshannon_badgerhold_v4_Storer)(nil)),
	}
}

// _github_com_timshannon_badgerhold_v4_Comparer is an interface wrapper for Comparer type
type _github_com_timshannon_badgerhold_v4_Comparer struct {
	IValue   interface{}
	WCompare func(other interface{}) (int, error)
}

func (W _github_com_timshannon_badgerhold_v4_Comparer) Compare(other interface{}) (int, error) {
	return W.WCompare(other)
}

// _github_com_timshannon_badgerhold_v4_Storer is an interface wrapper for Storer type
type _github_com_timshannon_badgerhold_v4_Storer struct {
	IValue   interface{}
	WIndexes func() map[string]badgerhold.Index
	WType    func() string
}

func (W _github_com_timshannon_badgerhold_v4_Storer) Indexes() map[string]badgerhold.Index {
	return W.WIndexes()
}
func (W _github_com_timshannon_badgerhold_v4_Storer) Type() string {
	return W.WType()
}
